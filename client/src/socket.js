import { io } from "socket.io-client";

// URL c·ªßa Socket.IO server
const SOCKET_URL = import.meta.env.VITE_API_URL || "http://localhost:4000";

/**
 * Service qu·∫£n l√Ω WebSocket connection v√† real-time communication
 * H·ªó tr·ª£ chat messaging, WebRTC calls, typing indicators, user status
 */
class SocketService {
  
  // ==================== WEBRTC CALL SIGNALING ====================
  
  /**
   * L·∫Øng nghe call offer t·ª´ ng∆∞·ªùi kh√°c
   * @param {Function} callback - Callback x·ª≠ l√Ω khi nh·∫≠n offer
   */
  onCallOffer(callback) {
    if (this.socket) {
      this.socket.on('call-offer', callback);
    }
  }

  /**
   * G·ª≠i call offer ƒë·∫øn conversation
   * @param {Object} offer - WebRTC offer object
   * @param {string} conversationId - ID c·ªßa conversation
   */
  emitCallOffer(offer, conversationId) {
    if (this.socket) {
      this.socket.emit('call-offer', { offer, conversationId });
    }
  }

  /**
   * L·∫Øng nghe call answer t·ª´ ng∆∞·ªùi nh·∫≠n
   * @param {Function} callback - Callback x·ª≠ l√Ω khi nh·∫≠n answer
   */
  onCallAnswer(callback) {
    if (this.socket) {
      this.socket.on('call-answer', callback);
    }
  }

  /**
   * G·ª≠i call answer ph·∫£n h·ªìi offer
   * @param {Object} answer - WebRTC answer object
   * @param {string} conversationId - ID c·ªßa conversation
   */
  emitCallAnswer(answer, conversationId) {
    if (this.socket) {
      this.socket.emit('call-answer', { answer, conversationId });
    }
  }

  /**
   * L·∫Øng nghe ICE candidates cho WebRTC connection
   * @param {Function} callback - Callback x·ª≠ l√Ω ICE candidate
   */
  onCallCandidate(callback) {
    if (this.socket) {
      this.socket.on('call-candidate', callback);
    }
  }

  /**
   * G·ª≠i ICE candidate cho WebRTC connection
   * @param {Object} candidate - ICE candidate object
   * @param {string} conversationId - ID c·ªßa conversation
   */
  emitCallCandidate(candidate, conversationId) {
    if (this.socket) {
      this.socket.emit('call-candidate', { candidate, conversationId });
    }
  }

  /**
   * G·ª≠i signal k·∫øt th√∫c cu·ªôc g·ªçi
   * @param {string} conversationId - ID c·ªßa conversation
   */
  emitCallEnd(conversationId) {
    if (this.socket) {
      this.socket.emit('call-end', { conversationId });
    }
  }

  /**
   * L·∫Øng nghe signal k·∫øt th√∫c cu·ªôc g·ªçi
   * @param {Function} callback - Callback x·ª≠ l√Ω khi cu·ªôc g·ªçi k·∫øt th√∫c
   */
  onCallEnd(callback) {
    if (this.socket) {
      this.socket.on('call-end', callback);
    }
  }
  // ==================== CONSTRUCTOR & CONNECTION ====================
  
  /**
   * Kh·ªüi t·∫°o SocketService
   */
  constructor() {
    this.socket = null; // Socket.IO client instance
    this.currentConversation = null; // ID c·ªßa conversation hi·ªán t·∫°i
  }

  /**
   * K·∫øt n·ªëi ƒë·∫øn Socket.IO server v·ªõi authentication
   * @param {Object} user - Th√¥ng tin user ƒë·ªÉ authenticate
   * @returns {Object} Socket instance
   */
  connect(user) {
    // Disconnect socket c≈© n·∫øu c√≥
    if (this.socket) {
      this.disconnect();
    }

    // T·∫°o k·∫øt n·ªëi m·ªõi v·ªõi authentication token
    this.socket = io(SOCKET_URL, {
      auth: {
        token: localStorage.getItem('token')
      },
      transports: ['websocket', 'polling'] // Fallback t·ª´ websocket sang polling
    });

    // Event handlers cho connection
    this.socket.on('connect', () => {
      console.log('üîå Connected to server');
    });

    this.socket.on('disconnect', () => {
      console.log('üîå Disconnected from server');
    });

    this.socket.on('connect_error', (error) => {
      console.error('üîå Connection error:', error);
    });

    return this.socket;
  }

  /**
   * Ng·∫Øt k·∫øt n·ªëi socket v√† reset state
   */
  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
      this.currentConversation = null;
    }
  }

  // ==================== CONVERSATION MANAGEMENT ====================
  
  /**
   * Join v√†o conversation ƒë·ªÉ nh·∫≠n messages real-time
   * @param {string} conversationId - ID c·ªßa conversation c·∫ßn join
   */
  joinConversation(conversationId) {
    if (this.socket && conversationId) {
      console.log('üî• Socket connected status:', this.socket.connected);
      console.log('üî• Socket ID:', this.socket.id);
      
      // R·ªùi conversation c≈© n·∫øu c√≥
      if (this.currentConversation) {
        this.socket.emit('leave-conversation', this.currentConversation);
      }
      
      console.log('üî• Joining conversation:', conversationId);
      this.socket.emit('join-conversation', conversationId);
      this.currentConversation = conversationId;
      
      // Log khi join th√†nh c√¥ng
      this.socket.on('conversation-joined', (data) => {
        console.log('üî• Joined conversation successfully, currentConversation set to:', this.currentConversation);
      });
    }
  }

  /**
   * R·ªùi kh·ªèi conversation hi·ªán t·∫°i
   */
  leaveConversation() {
    if (this.socket && this.currentConversation) {
      this.socket.emit('leave-conversation', this.currentConversation);
      this.currentConversation = null;
    }
  }

  // ==================== MESSAGE HANDLING ====================
  
  /**
   * G·ª≠i message m·ªõi qua socket (real-time)
   * @param {Object} messageData - D·ªØ li·ªáu message c·∫ßn g·ª≠i
   */
  sendMessage(messageData) {
    if (this.socket) {
      this.socket.emit('new-message', messageData);
    }
  }

  /**
   * L·∫Øng nghe messages m·ªõi t·ª´ socket
   * @param {Function} callback - Callback x·ª≠ l√Ω khi nh·∫≠n message m·ªõi
   */
  onNewMessage(callback) {
    if (this.socket) {
      console.log('üî• Setting up new-message listener on socket:', this.socket.id);
      console.log('üî• Socket connected:', this.socket.connected);
      console.log('üî• Current conversation:', this.currentConversation);
      
      // X√≥a listener c≈© ƒë·ªÉ tr√°nh duplicate
      this.socket.off('new-message');
      
      this.socket.on('new-message', (message) => {
        console.log('üî• Received new-message event:', message);
        console.log('üì® Message conversation ID:', message.conversationId || message.conversation);
        console.log('üì® Message object keys:', Object.keys(message));
        console.log('üì® Current conversation ID:', this.currentConversation);
        callback(message);
      });
    } else {
      console.warn('‚ö†Ô∏è No socket available for new-message listener');
    }
  }

  /**
   * T·∫Øt listener cho new messages
   */
  offNewMessage() {
    if (this.socket) {
      this.socket.off('new-message');
    }
  }

  // ==================== USER STATUS & TYPING INDICATORS ====================
  
  /**
   * L·∫Øng nghe thay ƒë·ªïi status c·ªßa users (online/offline)
   * @param {Function} callback - Callback x·ª≠ l√Ω khi user status thay ƒë·ªïi
   */
  onUserStatusChange(callback) {
    if (this.socket) {
      this.socket.on('user-status-change', callback);
    }
  }

  /**
   * T·∫Øt listener cho user status changes
   */
  offUserStatusChange() {
    if (this.socket) {
      this.socket.off('user-status-change');
    }
  }

  /**
   * L·∫Øng nghe khi c√≥ user ƒëang typing
   * @param {Function} callback - Callback x·ª≠ l√Ω khi c√≥ user typing
   */
  onTyping(callback) {
    if (this.socket) {
      this.socket.on('user-typing', callback);
    }
  }

  /**
   * L·∫Øng nghe khi user ng·ª´ng typing
   * @param {Function} callback - Callback x·ª≠ l√Ω khi user ng·ª´ng typing
   */
  onStopTyping(callback) {
    if (this.socket) {
      this.socket.on('user-stop-typing', callback);
    }
  }

  /**
   * G·ª≠i signal user ƒëang typing
   * @param {string} conversationId - ID c·ªßa conversation
   */
  emitTyping(conversationId) {
    if (this.socket) {
      this.socket.emit('typing', { conversationId });
    }
  }

  /**
   * G·ª≠i signal user ng·ª´ng typing
   * @param {string} conversationId - ID c·ªßa conversation
   */
  emitStopTyping(conversationId) {
    if (this.socket) {
      this.socket.emit('stop-typing', { conversationId });
    }
  }
}

// T·∫°o singleton instance c·ªßa SocketService
const socketService = new SocketService();
export default socketService;
