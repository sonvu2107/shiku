import express from "express";
import Story from "../models/Story.js";
import User from "../models/User.js";
import { authRequired } from "../middleware/auth.js";
import { checkBanStatus } from "../middleware/banCheck.js";
import NotificationService from "../services/NotificationService.js";

const router = express.Router();

/**
 * GET /api/stories/feed - L·∫•y stories feed (c·ªßa b·∫°n b√®)
 * Tr·∫£ v·ªÅ danh s√°ch users c√≥ stories v√† stories c·ªßa h·ªç
 */
router.get("/feed", authRequired, async (req, res, next) => {
  try {
    const user = await User.findById(req.user._id).select('friends');
    if (!user) {
      return res.status(404).json({ error: "User kh√¥ng t·ªìn t·∫°i" });
    }

    console.log(`üìñ Loading stories feed for user: ${user.name} (${req.user._id})`);
    console.log(`üë• User friends: ${user.friends?.length || 0} friends`);
    
    // L·∫•y stories feed
    const storiesFeed = await Story.getStoriesFeed(req.user._id, user.friends);
    
    console.log(`üìö Found ${storiesFeed.length} story groups`);
    storiesFeed.forEach(group => {
      console.log(`  - ${group._id?.name}: ${group.storyCount} stories`);
    });
    
    res.json({ 
      success: true,
      storiesGroups: storiesFeed 
    });
  } catch (error) {
    console.error('‚ùå Error loading stories feed:', error);
    next(error);
  }
});

/**
 * GET /api/stories/user/:userId - L·∫•y t·∫•t c·∫£ active stories c·ªßa m·ªôt user
 */
router.get("/user/:userId", authRequired, async (req, res, next) => {
  try {
    const { userId } = req.params;
    
    // L·∫•y th√¥ng tin user v√† friends ƒë·ªÉ check permission
    const currentUser = await User.findById(req.user._id).select('friends');
    
    const stories = await Story.getActiveStoriesForUser(userId);
    
    // Filter stories user c√≥ quy·ªÅn xem
    const viewableStories = stories.filter(story => 
      story.canView(req.user._id, currentUser.friends)
    );
    
    res.json({ 
      success: true,
      stories: viewableStories 
    });
  } catch (error) {
    next(error);
  }
});

/**
 * GET /api/stories/:storyId - L·∫•y chi ti·∫øt m·ªôt story
 */
router.get("/:storyId", authRequired, async (req, res, next) => {
  try {
    const story = await Story.findById(req.params.storyId)
      .populate('author', 'name avatarUrl isVerified')
      .populate('views.user', 'name avatarUrl')
      .populate('reactions.user', 'name avatarUrl');
    
    if (!story) {
      return res.status(404).json({ error: "Story kh√¥ng t·ªìn t·∫°i" });
    }
    
    // Ki·ªÉm tra quy·ªÅn xem
    const user = await User.findById(req.user._id).select('friends');
    if (!story.canView(req.user._id, user.friends)) {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem story n√†y" });
    }
    
    // T·ª± ƒë·ªông th√™m view n·∫øu ch∆∞a xem
    if (!story.hasViewed(req.user._id)) {
      await story.addView(req.user._id);
    }
    
    res.json({ 
      success: true,
      story 
    });
  } catch (error) {
    next(error);
  }
});

/**
 * POST /api/stories - T·∫°o story m·ªõi
 */
router.post("/", authRequired, checkBanStatus, async (req, res, next) => {
  try {
    const { 
      mediaUrl, 
      mediaType, 
      thumbnailUrl,
      caption, 
      backgroundColor,
      textColor,
      visibility, 
      hiddenFrom,
      duration,
      music
    } = req.body;
    
    // Validation
    if (!mediaUrl || !mediaType) {
      return res.status(400).json({ error: "Thi·∫øu mediaUrl ho·∫∑c mediaType" });
    }
    
    if (!["image", "video"].includes(mediaType)) {
      return res.status(400).json({ error: "mediaType kh√¥ng h·ª£p l·ªá" });
    }
    
    if (visibility && !["public", "friends", "custom"].includes(visibility)) {
      return res.status(400).json({ error: "visibility kh√¥ng h·ª£p l·ªá" });
    }
    
    // T·∫°o story
    const story = new Story({
      author: req.user._id,
      mediaUrl,
      mediaType,
      thumbnailUrl,
      caption: caption || "",
      backgroundColor: backgroundColor || "#000000",
      textColor: textColor || "#FFFFFF",
      visibility: visibility || "friends",
      hiddenFrom: hiddenFrom || [],
      duration: duration || (mediaType === "image" ? 5 : undefined),
      music: music || undefined
    });
    
    await story.save();
    
    // Populate author info
    await story.populate('author', 'name avatarUrl isVerified');
    
    res.status(201).json({ 
      success: true,
      story 
    });
  } catch (error) {
    next(error);
  }
});

/**
 * POST /api/stories/:storyId/view - ƒê√°nh d·∫•u ƒë√£ xem story
 */
router.post("/:storyId/view", authRequired, async (req, res, next) => {
  try {
    const story = await Story.findById(req.params.storyId);
    
    if (!story) {
      return res.status(404).json({ error: "Story kh√¥ng t·ªìn t·∫°i" });
    }
    
    // Ki·ªÉm tra quy·ªÅn xem
    const user = await User.findById(req.user._id).select('friends');
    if (!story.canView(req.user._id, user.friends)) {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem story n√†y" });
    }
    
    // Th√™m view
    await story.addView(req.user._id);
    
    res.json({ 
      success: true,
      viewCount: story.viewCount 
    });
  } catch (error) {
    next(error);
  }
});

/**
 * POST /api/stories/:storyId/react - React v√†o story
 */
router.post("/:storyId/react", authRequired, async (req, res, next) => {
  try {
    const { type } = req.body;
    
    // Validation
    const validTypes = ["like", "love", "laugh", "wow", "sad", "angry"];
    if (!type || !validTypes.includes(type)) {
      return res.status(400).json({ error: "Lo·∫°i reaction kh√¥ng h·ª£p l·ªá" });
    }
    
    const story = await Story.findById(req.params.storyId);
    
    if (!story) {
      return res.status(404).json({ error: "Story kh√¥ng t·ªìn t·∫°i" });
    }
    
    // Ki·ªÉm tra quy·ªÅn xem
    const user = await User.findById(req.user._id).select('friends');
    if (!story.canView(req.user._id, user.friends)) {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn react story n√†y" });
    }
    
    // Toggle reaction
    await story.toggleReaction(req.user._id, type);
    
    // G·ª≠i notification cho author (n·∫øu kh√¥ng ph·∫£i ch√≠nh m√¨nh)
    if (story.author.toString() !== req.user._id.toString()) {
      try {
        // L·∫•y th√¥ng tin reaction type ƒë·ªÉ hi·ªÉn th·ªã emoji
        const reactionEmojis = {
          like: 'üëç',
          love: '‚ù§Ô∏è',
          laugh: 'üòÇ',
          sad: 'üò¢',
          angry: 'üò†'
        };
        
        const emoji = reactionEmojis[type] || 'üòä';
        
        await NotificationService.create({
          recipient: story.author,
          sender: req.user._id,
          type: "reaction",
          title: "Ph·∫£n ·ª©ng story m·ªõi",
          message: `${req.user.name} ƒë√£ th·∫£ c·∫£m x√∫c ${emoji} v·ªõi story c·ªßa b·∫°n`,
          data: {
            url: `/stories/${story._id}`,
            metadata: { 
              reactionType: type,
              storyId: story._id,
              emoji: emoji
            }
          }
        });
      } catch (notifError) {
        // Silent fail cho notification
        console.error('Notification error:', notifError);
      }
    }
    
    // Populate reactions
    await story.populate('reactions.user', 'name avatarUrl');
    
    res.json({ 
      success: true,
      reactions: story.reactions,
      reactionCount: story.reactionCount
    });
  } catch (error) {
    next(error);
  }
});

/**
 * DELETE /api/stories/:storyId - X√≥a story
 */
router.delete("/:storyId", authRequired, async (req, res, next) => {
  try {
    const story = await Story.findById(req.params.storyId);
    
    if (!story) {
      return res.status(404).json({ error: "Story kh√¥ng t·ªìn t·∫°i" });
    }
    
    // Ch·ªâ author ho·∫∑c admin m·ªõi ƒë∆∞·ª£c x√≥a
    if (story.author.toString() !== req.user._id.toString() && req.user.role !== "admin") {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a story n√†y" });
    }
    
    await story.deleteOne();
    
    res.json({ 
      success: true,
      message: "ƒê√£ x√≥a story" 
    });
  } catch (error) {
    next(error);
  }
});

/**
 * GET /api/stories/:storyId/views - L·∫•y danh s√°ch ng∆∞·ªùi xem (ch·ªâ author)
 */
router.get("/:storyId/views", authRequired, async (req, res, next) => {
  try {
    const story = await Story.findById(req.params.storyId)
      .populate('views.user', 'name avatarUrl isVerified isOnline');
    
    if (!story) {
      return res.status(404).json({ error: "Story kh√¥ng t·ªìn t·∫°i" });
    }
    
    // Ch·ªâ author m·ªõi xem ƒë∆∞·ª£c danh s√°ch viewers
    if (story.author.toString() !== req.user._id.toString()) {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch n√†y" });
    }
    
    res.json({ 
      success: true,
      views: story.views,
      viewCount: story.viewCount
    });
  } catch (error) {
    next(error);
  }
});

/**
 * GET /api/stories/:storyId/reactions - L·∫•y danh s√°ch reactions (ch·ªâ author)
 */
router.get("/:storyId/reactions", authRequired, async (req, res, next) => {
  try {
    const story = await Story.findById(req.params.storyId)
      .populate('reactions.user', 'name avatarUrl isVerified isOnline');
    
    if (!story) {
      return res.status(404).json({ error: "Story kh√¥ng t·ªìn t·∫°i" });
    }
    
    // Ch·ªâ author m·ªõi xem ƒë∆∞·ª£c danh s√°ch reactions
    if (story.author.toString() !== req.user._id.toString()) {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch n√†y" });
    }
    
    res.json({ 
      success: true,
      reactions: story.reactions,
      reactionCount: story.reactionCount
    });
  } catch (error) {
    next(error);
  }
});

/**
 * GET /api/stories/:storyId/analytics - L·∫•y th·ªëng k√™ chi ti·∫øt (ch·ªâ author)
 * T·ªëi ∆∞u: Ch·ªâ populate c·∫ßn thi·∫øt, gi·ªõi h·∫°n s·ªë l∆∞·ª£ng
 */
router.get("/:storyId/analytics", authRequired, async (req, res, next) => {
  try {
    const { limit = 20, offset = 0, quick = false } = req.query;
    
    // Ki·ªÉm tra story t·ªìn t·∫°i v√† quy·ªÅn truy c·∫≠p tr∆∞·ªõc
    const story = await Story.findById(req.params.storyId).select('author createdAt expiresAt');
    
    if (!story) {
      return res.status(404).json({ error: "Story kh√¥ng t·ªìn t·∫°i" });
    }
    
    // Ch·ªâ author m·ªõi xem ƒë∆∞·ª£c analytics
    if (story.author.toString() !== req.user._id.toString()) {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem th·ªëng k√™ n√†y" });
    }
    
    // Quick mode - ch·ªâ l·∫•y s·ªë li·ªáu c∆° b·∫£n
    if (quick === 'true') {
      const basicStats = await Story.findById(req.params.storyId)
        .populate('views.user', 'name avatarUrl isVerified isOnline')
        .populate('reactions.user', 'name avatarUrl isVerified isOnline')
        .select('views reactions createdAt expiresAt');
      
      const totalViews = basicStats.views?.length || 0;
      const totalReactions = basicStats.reactions?.length || 0;
      const uniqueViewers = new Set(basicStats.views?.map(v => v.user._id.toString())).size;
      const engagementRate = uniqueViewers > 0 ? Math.round((totalReactions / uniqueViewers) * 100) : 0;
      
      // Reaction summary
      const reactionSummary = {};
      basicStats.reactions?.forEach(reaction => {
        reactionSummary[reaction.type] = (reactionSummary[reaction.type] || 0) + 1;
      });
      
      const reactionSummaryArray = Object.entries(reactionSummary).map(([type, count]) => ({
        type,
        count
      }));
      
      const timeSinceCreated = Math.floor((new Date() - new Date(story.createdAt)) / (1000 * 60 * 60));
      
      return res.json({
        success: true,
        analytics: {
          totalViews,
          totalReactions,
          uniqueViewers,
          engagementRate,
          timeSinceCreated: timeSinceCreated < 1 ? 'V·ª´a t·∫°o' : `${timeSinceCreated}h tr∆∞·ªõc`,
          views: basicStats.views || [],
          reactions: basicStats.reactions || [],
          reactionSummary: reactionSummaryArray,
          createdAt: story.createdAt,
          expiresAt: story.expiresAt,
          quick: true
        }
      });
    }
    
    // Full mode - l·∫•y d·ªØ li·ªáu chi ti·∫øt
    const [viewsData, reactionsData] = await Promise.all([
      // Views v·ªõi gi·ªõi h·∫°n
      Story.findById(req.params.storyId)
        .populate({
          path: 'views.user',
          select: 'name avatarUrl isVerified isOnline',
          options: { limit: parseInt(limit), skip: parseInt(offset) }
        })
        .select('views createdAt'),
      
      // Reactions v·ªõi gi·ªõi h·∫°n
      Story.findById(req.params.storyId)
        .populate({
          path: 'reactions.user',
          select: 'name avatarUrl isVerified isOnline',
          options: { limit: parseInt(limit), skip: parseInt(offset) }
        })
        .select('reactions')
    ]);
    
    // T√≠nh to√°n analytics nhanh
    const totalViews = viewsData.views?.length || 0;
    const totalReactions = reactionsData.reactions?.length || 0;
    
    // T√≠nh unique viewers t·ª´ views hi·ªán t·∫°i (c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c 100% n·∫øu c√≥ pagination)
    const uniqueViewers = new Set(viewsData.views?.map(v => v.user._id.toString())).size;
    
    // T√≠nh engagement rate
    const engagementRate = uniqueViewers > 0 ? Math.round((totalReactions / uniqueViewers) * 100) : 0;
    
    // Reaction summary
    const reactionSummary = {};
    reactionsData.reactions?.forEach(reaction => {
      reactionSummary[reaction.type] = (reactionSummary[reaction.type] || 0) + 1;
    });
    
    const reactionSummaryArray = Object.entries(reactionSummary).map(([type, count]) => ({
      type,
      count
    }));
    
    // Th·ªùi gian t·ª´ khi t·∫°o
    const timeSinceCreated = Math.floor((new Date() - new Date(story.createdAt)) / (1000 * 60 * 60)); // hours
    
    const analytics = {
      totalViews,
      totalReactions,
      uniqueViewers,
      engagementRate,
      timeSinceCreated: timeSinceCreated < 1 ? 'V·ª´a t·∫°o' : `${timeSinceCreated}h tr∆∞·ªõc`,
      views: viewsData.views || [],
      reactions: reactionsData.reactions || [],
      reactionSummary: reactionSummaryArray,
      createdAt: story.createdAt,
      expiresAt: story.expiresAt,
      // Th√™m th√¥ng tin pagination
      pagination: {
        limit: parseInt(limit),
        offset: parseInt(offset),
        hasMore: (viewsData.views?.length || 0) >= parseInt(limit) || (reactionsData.reactions?.length || 0) >= parseInt(limit)
      }
    };
    
    res.json({ 
      success: true,
      analytics
    });
  } catch (error) {
    console.error('Analytics error:', error);
    next(error);
  }
});

/**
 * GET /api/stories/my - L·∫•y stories c·ªßa ch√≠nh m√¨nh
 */
router.get("/my/all", authRequired, async (req, res, next) => {
  try {
    const stories = await Story.getActiveStoriesForUser(req.user._id);
    
    res.json({ 
      success: true,
      stories 
    });
  } catch (error) {
    next(error);
  }
});

/**
 * POST /api/stories/cleanup - Cleanup expired stories (admin only ho·∫∑c cron job)
 */
router.post("/cleanup", authRequired, async (req, res, next) => {
  try {
    // Ch·ªâ admin ƒë∆∞·ª£c cleanup manually
    if (req.user.role !== "admin") {
      return res.status(403).json({ error: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn cleanup stories" });
    }
    
    const deletedCount = await Story.cleanExpiredStories();
    
    res.json({ 
      success: true,
      message: `ƒê√£ x√≥a ${deletedCount} stories h·∫øt h·∫°n` 
    });
  } catch (error) {
    next(error);
  }
});

export default router;
